

===============New Concepts================

	----------Floating Point Numbers----------

		Bit representation of floating point numbers:
			- sign bit
			- exponent
				- 2 to the power of x, where x is the number needed to get enough mantissa digits in front of the decimal point
			- mantissa
				- the actual digits of the number

		Can lead to rounding errors when a number has infinite digits, such as 1/3.

	------------Member Functions--------------

		A function that is part of a class.

		The first parameter is implicitly the object the function is called on.

	-------------Operator Functions-----------

		Will overload an operator (like =) with a function.

		Depending on which operator is overloaded, the function takes a set of
		predetermined parameters.

	--------------Compiler Extensions---------

		These are compiler specific features that are not part of the C++ standard.
		They are supposed to make the language easier to use, but they are not portable.

		__attribute__ ((constructor))
			- tells the compiler to ignore certain warnings and much more

		It is not clear to me how this is different from compiler symbols,
		which are also compiler specific features that are not part of the C++ standard.

	---------------Namespaces-----------------

		A namespace is a scope that contains a set of names to access functions, variables, and other entities.

		Namespaces are used to prevent name collisions, because the same name can be used in different namespaces.

	---------------Overloading----------------

		Defining multiple functions (iterations) and operators with the same name.


	---------------References-----------------

		A safer and more convenient pointer.
		
		A reference is an alias for a variable.
		Any changes made to the reference are reflected in the original variable.

		A reference cannot be null and must be initialized when declared.


	---------------Type Safety----------------
	
		Compile-time checking of types.
		Overloading is type safe because the compiler can determine which iteration of a function to call based on the types of the arguments.

	---------Orthodox Canonical Form----------

		- classes must always have these member functions:
			- default constructor
			- copy constructor
			- copy assignment operator
			- destructor

		- order of member variables and functions
			- public functions
			- protected functions
			- private functions
			- public variables
			- protected variables
			- private variables
		- use const whenever possible
		- use initialization lists to initialize member variables in the constructor

	--------------New Keywords----------------

		- Constructor
			- always exists, even if not defined
			- purpose is to initialize member variables

		- public
			- accessible to all
		- private
			- accessible only to the class
			- private variables and functions begin with an underscore
		- protected
			- accessible to the class and its derived classes (classes that inherit this class)
		- virtual
			- a virtual member of a class can be overridden by a derived class
			- this ensures that there is no ambiguity when calling a function on a derived class
			- pure virtual
				- member function of class is left empty by setting it to 0 in the class definition
				- derived class must override the function or it will be abstract
				- abstract class
					- a class with at least one pure virtual function
					- cannot be instantiated
		- override
			- overrides a virtual function
		- static
			- a class member can be static, which means it is shared by all instances of the class
			- there does not have to be an instance created to access a static member
		- this
			- refers to the current instance of the class
		- new
			- creates new instance of an object on the heap

	--------------Casting-------------------

		- static_cast to cast upwards in class hierarchy
		- dynamic_cast to cast downwards in class hierarchy (and seldomly sideways)
			- for this to work, base class must have at least one virtual function (polymporphism)
